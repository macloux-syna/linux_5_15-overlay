/* SPDX-License-Identifier: GPL-2.0 */
/*
 * Copyright (C) 2021 - 2023 Synaptics Incorporated
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 */
#ifndef __ISPSS_CLKRST_H__
#define __ISPSS_CLKRST_H__

#include "ispSS_reg.h"

enum ISPSS_CLKRST_FUNC_BLK {
	ISPSS_CLKRST_FUNC_BLK_ALM,
	ISPSS_CLKRST_FUNC_BLK_MTR,
	ISPSS_CLKRST_FUNC_BLK_TSB,
	ISPSS_CLKRST_FUNC_BLK_FWR,
	ISPSS_CLKRST_FUNC_BLK_BCM,
	ISPSS_CLKRST_FUNC_BLK_CSI,
	ISPSS_CLKRST_FUNC_BLK_ISP,
	ISPSS_CLKRST_FUNC_BLK_TILE,
	ISPSS_CLKRST_FUNC_BLK_ROT,
	ISPSS_CLKRST_FUNC_BLK_DWRP,
	ISPSS_CLKRST_FUNC_BLK_SCL,
	ISPSS_CLKRST_FUNC_MAX,
};

enum ISPSS_CLKRST_CLK {
	ISPSS_CLKRST_CLK_ALM_START,
	ISPSS_CLKRST_CLK_ALMSYS = ISPSS_CLKRST_CLK_ALM_START,
	ISPSS_CLKRST_CLK_ALMCFG,

	ISPSS_CLKRST_CLK_MTR_START,
	ISPSS_CLKRST_CLK_MTRSYS = ISPSS_CLKRST_CLK_MTR_START,
	ISPSS_CLKRST_CLK_MTRCFG,

	ISPSS_CLKRST_CLK_TSB_START,
	ISPSS_CLKRST_CLK_TSBDHUBDY = ISPSS_CLKRST_CLK_TSB_START,
	ISPSS_CLKRST_CLK_TSBDHUBSW,
	ISPSS_CLKRST_CLK_TSBDHUB,
	ISPSS_CLKRST_CLK_TSBCFG,
	ISPSS_CLKRST_CLK_TSB_END = ISPSS_CLKRST_CLK_TSBCFG,

	ISPSS_CLKRST_CLK_FWR_START,
	ISPSS_CLKRST_CLK_FWRDHUBDY = ISPSS_CLKRST_CLK_FWR_START,
	ISPSS_CLKRST_CLK_FWRDHUBSW,
	ISPSS_CLKRST_CLK_FWRDHUB,
	ISPSS_CLKRST_CLK_FWRCFG,
	ISPSS_CLKRST_CLK_FWR_END = ISPSS_CLKRST_CLK_FWRCFG,

	ISPSS_CLKRST_CLK_BCM_START,
	ISPSS_CLKRST_CLK_BCMCFG = ISPSS_CLKRST_CLK_BCM_START,
	ISPSS_CLKRST_CLK_BCMSYS,
	ISPSS_CLKRST_CLK_BCMCSI0,
	ISPSS_CLKRST_CLK_BCMCSI1,
	ISPSS_CLKRST_CLK_BCMISP,
	ISPSS_CLKRST_CLK_BCMSCL,
	ISPSS_CLKRST_CLK_BCMBE,
	ISPSS_CLKRST_CLK_BCMDPHYCFG,
	ISPSS_CLKRST_CLK_BCMDPHYPHY,
	ISPSS_CLKRST_CLK_BCM_END = ISPSS_CLKRST_CLK_BCMDPHYPHY,

	ISPSS_CLKRST_CLK_CSI_START,
	ISPSS_CLKRST_CLK_DPHYCFG = ISPSS_CLKRST_CLK_CSI_START,
	ISPSS_CLKRST_CLK_DPHYPHY,
	ISPSS_CLKRST_CLK_CSICFG,
	ISPSS_CLKRST_CLK_CSICSI0,
	ISPSS_CLKRST_CLK_CSICSI1,

	ISPSS_CLKRST_CLK_ISP_START,
	ISPSS_CLKRST_CLK_ISPCFG = ISPSS_CLKRST_CLK_ISP_START,
	ISPSS_CLKRST_CLK_ISPSYS,
	ISPSS_CLKRST_CLK_ISPISP,
	ISPSS_CLKRST_CLK_ISPCSI0,
	ISPSS_CLKRST_CLK_ISPCSI1,
	ISPSS_CLKRST_CLK_ISPMCM,
	ISPSS_CLKRST_CLK_ISP_END = ISPSS_CLKRST_CLK_ISPMCM,

	ISPSS_CLKRST_CLK_TILE_START,
	ISPSS_CLKRST_CLK_TILECFG = ISPSS_CLKRST_CLK_TILE_START,
	ISPSS_CLKRST_CLK_TILEISP,
	ISPSS_CLKRST_CLK_TILESYS,
	ISPSS_CLKRST_CLK_TILE_END = ISPSS_CLKRST_CLK_TILESYS,

	ISPSS_CLKRST_CLK_ROT_START,
	ISPSS_CLKRST_CLK_ROTCFG = ISPSS_CLKRST_CLK_ROT_START,
	ISPSS_CLKRST_CLK_ROTSYS,
	ISPSS_CLKRST_CLK_ROTBE,
	ISPSS_CLKRST_CLK_ROT_END = ISPSS_CLKRST_CLK_ROTBE,

	ISPSS_CLKRST_CLK_DWRP_START,
	ISPSS_CLKRST_CLK_DWRPCFG = ISPSS_CLKRST_CLK_DWRP_START,
	ISPSS_CLKRST_CLK_DWRPBE,
	ISPSS_CLKRST_CLK_DWRPSYS,
	ISPSS_CLKRST_CLK_DWRP_END = ISPSS_CLKRST_CLK_DWRPSYS,

	ISPSS_CLKRST_CLK_SCL_START,
	ISPSS_CLKRST_CLK_SCLCFG = ISPSS_CLKRST_CLK_SCL_START,
	ISPSS_CLKRST_CLK_SCLSCL,
	ISPSS_CLKRST_CLK_SCLSYS,
	ISPSS_CLKRST_CLK_SCLISP,
	ISPSS_CLKRST_CLK_SCL_END = ISPSS_CLKRST_CLK_SCLISP,

	ISPSS_CLKRST_CLK_MAX
};

enum ISPSS_CLKRST_CLK_STATE {
	ISPSS_CLKRST_CLK_STATE_DISABLE,
	ISPSS_CLKRST_CLK_STATE_ENABLE
};

enum ISPSS_CLKRST_RESET_STATE {
	ISPSS_CLKRST_RESET_STATE_DISABLE,
	ISPSS_CLKRST_RESET_STATE_ENABLE
};

enum ISPSS_CLKRST_ISO_FUNC_TYPE {
	ISPSS_CLKRST_ISO_FUNC_TYPE_AXI,
	ISPSS_CLKRST_ISO_FUNC_TYPE_OCP,
	ISPSS_CLKRST_ISO_FUNC_TYPE_CFG,
	ISPSS_CLKRST_ISO_FUNC_TYPE_MAX,
};

enum ISPSS_CLKRST_ISO_OPER_TYPE {
	ISPSS_CLKRST_ISO_OPER_TYPE_ENABLE,
	ISPSS_CLKRST_ISO_OPER_TYPE_CLEAR,
	ISPSS_CLKRST_ISO_OPER_TYPE_ST,
	ISPSS_CLKRST_ISO_OPER_TYPE_MAX,
};

enum ISPSS_CLKRST_ISO_FUNC_AXI {
	ISPSS_CLKRST_ISO_FUNC_AXI_fwrAxiIsoEn,
	ISPSS_CLKRST_ISO_FUNC_AXI_tsbAxiM1IsoEn,
	ISPSS_CLKRST_ISO_FUNC_AXI_ispAxiIsoEn,
	ISPSS_CLKRST_ISO_FUNC_AXI_ixbarM1AxiIsoEn,
	ISPSS_CLKRST_ISO_FUNC_AXI_ispSSAxiIsoEn,
	ISPSS_CLKRST_ISO_FUNC_AXI_MAX,
};

enum ISPSS_CLKRST_ISO_FUNC_BIU {
	ISPSS_CLKRST_ISO_FUNC_CFG_mtrBiuIsoEn,
	ISPSS_CLKRST_ISO_FUNC_CFG_almBiuIsoEn,
	ISPSS_CLKRST_ISO_FUNC_CFG_tsbBiuIsoEn,
	ISPSS_CLKRST_ISO_FUNC_CFG_fwrBiuIsoEn,
	ISPSS_CLKRST_ISO_FUNC_CFG_ispBiuIsoEn,
	ISPSS_CLKRST_ISO_FUNC_CFG_csiBiuIsoEn,
	ISPSS_CLKRST_ISO_FUNC_CFG_dphyBiuIsoEn,
	ISPSS_CLKRST_ISO_FUNC_CFG_tileBiuIsoEn,
	ISPSS_CLKRST_ISO_FUNC_CFG_scldnBiuIsoEn,
	ISPSS_CLKRST_ISO_FUNC_CFG_rotBiuIsoEn,
	ISPSS_CLKRST_ISO_FUNC_CFG_dwrpBiuIsoEn,
	ISPSS_CLKRST_ISO_FUNC_CFG_MAX,
};

enum ISPSS_CLKRST_ISO_FUNC_OCP {
	ISPSS_CLKRST_ISO_FUNC_OCP_tileOcpIsoEn,
	ISPSS_CLKRST_ISO_FUNC_OCP_scldnOcpIsoEn,
	ISPSS_CLKRST_ISO_FUNC_OCP_BCMOcpIsoEn,
	ISPSS_CLKRST_ISO_FUNC_OCP_dwrpOcpIsoEn,
	ISPSS_CLKRST_ISO_FUNC_OCP_rotOcpIsoEn,
	ISPSS_CLKRST_ISO_FUNC_OCP_MAX,
};

enum ISPSS_CLKRST_ISO_STATE {
	ISPSS_CLKRST_ISO_STATE_DISABLE,
	ISPSS_CLKRST_ISO_STATE_ENABLE
};

enum ISPSS_CLKRST_ISO_STATE_MACHINE {
	ISPSS_CLKRST_ISO_STATE_MACHINE_NOT_BUSY,
	ISPSS_CLKRST_ISO_STATE_MACHINE_BUSY
};

void ISPSS_CLKRST_ISPBeModuleSetClockGateState(enum ISPBE_MODULES module,
		enum ISPSS_CLKRST_CLK_STATE clkState);
void ISPSS_CLKRST_ISPMiscModuleSetClockGateState(enum ISPMISC_MODULES module,
		enum ISPSS_CLKRST_CLK_STATE clkState);

enum ISPSS_CLKRST_CLK_STATE ISPSS_CLKRST_GetClkEnable(enum ISPSS_CLKRST_CLK clk);
void ISPSS_CLKRST_SetClkEnable(enum ISPSS_CLKRST_CLK clk,
		enum ISPSS_CLKRST_CLK_STATE clkState);

enum ISPSS_CLKRST_RESET_STATE ISPSS_CLKRST_GetFuncReset(enum ISPSS_CLKRST_FUNC_BLK funcBlk);
void ISPSS_CLKRST_SetFuncReset(enum ISPSS_CLKRST_FUNC_BLK funcBlk,
		enum ISPSS_CLKRST_RESET_STATE rst);
void ISPSS_CLKRST_DoFuncReset(enum ISPSS_CLKRST_FUNC_BLK funcBlk);

enum ISPSS_CLKRST_RESET_STATE ISPSS_CLKRST_GetBiuReset(enum ISPSS_CLKRST_FUNC_BLK funcBlk);
void ISPSS_CLKRST_SetBiuReset(enum ISPSS_CLKRST_FUNC_BLK funcBlk,
		enum ISPSS_CLKRST_RESET_STATE rst);
void ISPSS_CLKRST_DoBiuReset(enum ISPSS_CLKRST_FUNC_BLK funcBlk);

enum ISPSS_CLKRST_ISO_STATE ISPSS_CLKRST_GetIsoEnable(
		enum ISPSS_CLKRST_ISO_FUNC_TYPE isoFuncType,
		UINT32 funcAxiBiu, UINT32 maxFuncAxiBiu);
void ISPSS_CLKRST_SetIsoEnable(enum ISPSS_CLKRST_ISO_FUNC_TYPE isoFuncType,
		UINT32 funcAxiBiu, UINT32 maxFuncAxiBiu,
		enum ISPSS_CLKRST_ISO_STATE isoEnable);

enum ISPSS_CLKRST_ISO_STATE ISPSS_CLKRST_GetIsoClear(
		enum ISPSS_CLKRST_ISO_FUNC_TYPE isoFuncType,
		UINT32 funcAxiBiu, UINT32 maxFuncAxiBiu);
void ISPSS_CLKRST_SetIsoClear(enum ISPSS_CLKRST_ISO_FUNC_TYPE isoFuncType,
		UINT32 funcAxiBiu, UINT32 maxFuncAxiBiu,
		enum ISPSS_CLKRST_ISO_STATE isoEnable);

enum ISPSS_CLKRST_ISO_STATE_MACHINE ISPSS_CLKRST_GetIsoState(
		enum ISPSS_CLKRST_ISO_FUNC_TYPE isoFuncType,
		UINT32 funcAxiBiui, UINT32 maxFuncAxiBiu);

#endif //__ISPSS_CLKRST_H__
